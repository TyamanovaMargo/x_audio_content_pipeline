#!/usr/bin/env python3

import asyncio
import csv
import os
import sys
import argparse
from datetime import datetime
from typing import Optional, Dict
from playwright.async_api import async_playwright, Page, Browser, BrowserContext
import random
import time

# –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏, —Å–∫—Ä–æ–ª–ª—ã, –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
async def human_like_behavior(page: Page):
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    await page.mouse.move(random.randint(100, 400), random.randint(100, 400))
    await asyncio.sleep(random.uniform(0.5, 1.5))
    await page.mouse.move(random.randint(100, 800), random.randint(100, 800))
    await asyncio.sleep(random.uniform(0.5, 1.5))
    await page.evaluate('window.scrollBy(0, Math.floor(Math.random() * 100));')
    await asyncio.sleep(random.uniform(0.3, 1.0))

async def login_x(context: BrowserContext, headless: bool, login: str, password: str) -> BrowserContext:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ X.com"""
    page = await context.new_page()
    
    try:
        print("üîê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
        await page.goto('https://x.com/i/flow/login', timeout=20000)
        await asyncio.sleep(random.uniform(3.0, 5.0))

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è username
        username_selectors = [
            'input[name="text"]',
            'input[autocomplete="username"]',
            'input[data-testid="ocfEnterTextTextInput"]',
            'input[type="text"]'
        ]
        
        username_input = None
        for selector in username_selectors:
            try:
                username_input = await page.wait_for_selector(selector, timeout=5000)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ username: {selector}")
                break
            except:
                continue
        
        if not username_input:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            if not headless:
                print("üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞")
                input("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                await page.close()
                return context
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                await page.close()
                return context
            
        await username_input.fill(login)
        await human_like_behavior(page)
        
        # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "Next"
        next_selectors = [
            'div[role="button"]:has-text("Next")',
            'div[role="button"]:has-text("–î–∞–ª–µ–µ")',
            'button:has-text("Next")',
            '[data-testid="LoginForm_Login_Button"]'
        ]
        
        for selector in next_selectors:
            try:
                next_button = await page.wait_for_selector(selector, timeout=3000)
                await next_button.click()
                print("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Next")
                break
            except:
                continue
        
        await asyncio.sleep(random.uniform(2.0, 4.0))

        # –ü–æ–∏—Å–∫ –ø–æ–ª—è –ø–∞—Ä–æ–ª—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        password_selectors = [
            'input[name="password"]',
            'input[type="password"]',
            'input[autocomplete="current-password"]',
            'input[data-testid="ocfEnterTextTextInput"]'
        ]
        
        password_input = None
        for selector in password_selectors:
            try:
                password_input = await page.wait_for_selector(selector, timeout=8000)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è: {selector}")
                break
            except:
                continue
        
        if not password_input:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è")
            if not headless:
                print("üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞")
                input("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                await page.close()
                return context
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                await page.close()
                return context
            
        await password_input.fill(password)
        await human_like_behavior(page)
        
        # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
        login_selectors = [
            'div[role="button"]:has-text("Log in")',
            'div[role="button"]:has-text("–í–æ–π—Ç–∏")',
            'button[type="submit"]',
            '[data-testid="LoginForm_Login_Button"]'
        ]
        
        for selector in login_selectors:
            try:
                login_button = await page.wait_for_selector(selector, timeout=5000)
                await login_button.click()
                print("‚úÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞")
                break
            except:
                continue

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞
        await asyncio.sleep(8)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA
        try:
            challenge_input = await page.query_selector('input[name="challenge_response"]')
            if challenge_input:
                print("üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA).")
                if headless:
                    print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å —Ñ–ª–∞–≥–æ–º --no-headless –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ 2FA –∫–æ–¥–∞.")
                    print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    await page.close()
                    return context
                else:
                    print("‚è≥ –í–≤–µ–¥–∏—Ç–µ 2FA –∫–æ–¥ –≤—Ä—É—á–Ω—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    input()
        except:
            pass

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
        try:
            error_selectors = [
                'text="Sorry, we could not authenticate you."',
                'text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"',
                '[data-testid="LoginForm_Error"]'
            ]
            
            for selector in error_selectors:
                error_element = await page.query_selector(selector)
                if error_element:
                    print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    await page.close()
                    return context
        except:
            pass

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        success_selectors = [
            'a[aria-label="Profile"]',
            'a[href="/home"]',
            'div[data-testid="primaryColumn"]',
            '[data-testid="SideNav_AccountSwitcher_Button"]'
        ]
        
        for selector in success_selectors:
            try:
                await page.wait_for_selector(selector, timeout=5000)
                print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ X.com")
                await page.close()
                return context
            except:
                continue
                
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        await page.close()
        return context

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        if not headless:
            print("üîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
            input("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –≤—Ä—É—á–Ω—É—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
            await page.close()
            return context
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            await page.close()
            return context

async def check_account(page: Page, username: str) -> Dict:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
    url = f'https://x.com/{username}'
    result = {
        "username": username, 
        "status": "error", 
        "last_activity": None, 
        "external_links": [],
        "follower_count": None,
        "following_count": None,
        "verification": "unknown"
    }
    
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç: {username}")
        await page.goto(url, timeout=20000)
        await asyncio.sleep(random.uniform(2.0, 4.0))
        await human_like_behavior(page)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        content = await page.content()
        content_lower = content.lower()

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
        not_exist_phrases = [
            "this account doesn't exist",
            "this page doesn't exist", 
            "—ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            "try searching for another",
            "page does not exist",
            "user not found"
        ]
        
        if any(phrase in content_lower for phrase in not_exist_phrases):
            result['status'] = 'does_not_exist'
            print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return result

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if "account suspended" in content_lower:
            result['status'] = 'suspended'
            print(f"üö´ –ê–∫–∫–∞—É–Ω—Ç {username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return result

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç  
        if any(phrase in content_lower for phrase in [
            "these tweets are protected",
            "—ç—Ç–∏ —Ç–≤–∏—Ç—ã –∑–∞—â–∏—â–µ–Ω—ã",
            "protected tweets"
        ]):
            result['status'] = 'protected'
            print(f"üîí –ê–∫–∫–∞—É–Ω—Ç {username} –∑–∞—â–∏—â–µ–Ω")
            return result

        # 4. –û–°–ù–û–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ Following
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ Following –¥–ª—è {username}...")
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ "Following"
        following_selectors = [
            'a[href$="/following"]',
            'a[href*="/following"]', 
            'div[data-testid="UserProfileHeader_Items"] a:has-text("Following")',
            'a:has-text("Following")',
            'span:has-text("Following")',
            'div:has-text("Following")',
            '[data-testid="UserProfileHeader_Items"] a[href*="following"]'
        ]
        
        following_clicked = False
        current_following_count = None
        
        for selector in following_selectors:
            try:
                following_element = await page.wait_for_selector(selector, timeout=3000)
                if following_element:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç Following: {selector}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    try:
                        following_text = await following_element.inner_text()
                        numbers = ''.join(c for c in following_text if c.isdigit())
                        if numbers:
                            current_following_count = int(numbers)
                            print(f"üìä Following: {current_following_count}")
                    except:
                        pass
                    
                    # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å
                    await following_element.click()
                    await asyncio.sleep(random.uniform(1.5, 3.0))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–µ–ª –ø–µ—Ä–µ—Ö–æ–¥
                    current_url = page.url
                    if "/following" in current_url:
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∫–ª–∏–∫ –ø–æ Following –¥–ª—è {username}")
                        following_clicked = True
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
                        await page.goto(url, timeout=15000)
                        await asyncio.sleep(random.uniform(1.0, 2.5))
                        break
                    else:
                        print(f"‚ö†Ô∏è –ö–ª–∏–∫ –Ω–µ –ø—Ä–∏–≤–µ–ª –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–ª—è {username}")
                        
            except Exception as e:
                continue
        
        result['following_count'] = current_following_count

        # 5. –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        try:
            followers_selectors = [
                'a:has-text("Followers")',
                'span:has-text("Followers")', 
                'div:has-text("Followers")',
                '[data-testid="UserProfileHeader_Items"] a[href*="followers"]'
            ]
            
            for selector in followers_selectors:
                try:
                    followers_element = await page.query_selector(selector)
                    if followers_element:
                        followers_text = await followers_element.inner_text()
                        numbers = ''.join(c for c in followers_text if c.isdigit())
                        if numbers:
                            result['follower_count'] = int(numbers)
                            print(f"üìä Followers: {result['follower_count']}")
                            break
                except:
                    continue
        except:
            pass

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        try:
            verified_selectors = [
                'svg[data-testid="verificationBadge"]',
                '[data-testid="verificationBadge"]',
                'svg[aria-label="Verified account"]'
            ]
            
            for selector in verified_selectors:
                verified_badge = await page.query_selector(selector)
                if verified_badge:
                    result['verification'] = "verified"
                    print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                    break
            else:
                result['verification'] = "not_verified"
        except:
            pass

        # 7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        active_profile_indicators = [
            'div[data-testid="UserProfileHeader"]',
            'div[data-testid="UserName"]', 
            'div[data-testid="UserDescription"]',
            'img[data-testid="UserAvatar"]',
            'div[data-testid="primaryColumn"]'
        ]
        
        profile_found = False
        for indicator in active_profile_indicators:
            try:
                element = await page.query_selector(indicator)
                if element:
                    profile_found = True
                    break
            except:
                continue

        # 8. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        external_links = []
        try:
            # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ URL –ø–æ–ª–µ
            bio_selectors = [
                'div[data-testid="UserDescription"] a[href^="http"]',
                'div[data-testid="UserDescription"] a[href^="https"]',
                'div[data-testid="UserUrl"] a[href^="http"]',
                'div[data-testid="UserUrl"] a[href^="https"]',
                'span[data-testid="UserUrl"] a',
                'a[data-testid="UserUrl"]'
            ]
            
            for selector in bio_selectors:
                try:
                    links = await page.query_selector_all(selector)
                    for link in links:
                        href = await link.get_attribute('href')
                        if href and href not in external_links and href != url:
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–Ω–µ x.com/twitter.com)
                            if not any(domain in href.lower() for domain in ['x.com', 'twitter.com', 't.co']):
                                external_links.append(href)
                                print(f"üîó –ù–∞–π–¥–µ–Ω–∞ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞: {href}")
                except:
                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}")

        result['external_links'] = external_links

        # 9. –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        try:
            time_element = await page.query_selector('time[datetime]')
            if time_element:
                datetime_str = await time_element.get_attribute('datetime')
                if datetime_str:
                    result['last_activity'] = datetime_str
                    print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {datetime_str}")
        except Exception:
            pass

        # 10. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if following_clicked:
            result['status'] = 'exists_verified'  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∫–ª–∏–∫–æ–º
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (–∫–ª–∏–∫ –ø–æ Following —É—Å–ø–µ—à–µ–Ω)")
        elif profile_found:
            result['status'] = 'exists_likely'     # –í–µ—Ä–æ—è—Ç–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            print(f"‚òëÔ∏è –ê–∫–∫–∞—É–Ω—Ç {username} –≤–µ—Ä–æ—è—Ç–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è)")
        else:
            result['status'] = 'requires_auth'     # –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            print(f"üîë –ê–∫–∫–∞—É–Ω—Ç {username} —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        return result

    except Exception as e:
        result['status'] = 'error'
        result['error'] = str(e)
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {username}: {e}")
        return result

async def worker(sem: asyncio.Semaphore, context: BrowserContext, username: str) -> Dict:
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    async with sem:
        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        await asyncio.sleep(random.uniform(1.0, 3.0))
        
        page = await context.new_page()
        try:
            result = await check_account(page, username)
            return result
        finally:
            await page.close()
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await asyncio.sleep(random.uniform(0.5, 1.5))

def read_usernames_from_file(filepath: str) -> list:
    """–ß–∏—Ç–∞–µ—Ç –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CSV –∏ TXT)"""
    usernames = []
    
    try:
        with open(filepath, 'r', encoding='utf-8') as infile:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
            if filepath.endswith('.csv'):
                reader = csv.DictReader(infile)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ "username"
                if 'username' not in reader.fieldnames:
                    print(f"‚ùå –í CSV —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ 'username'")
                    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {reader.fieldnames}")
                    sys.exit(1)
                
                # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫—É username
                for row in reader:
                    username = row['username'].strip()
                    if username:
                        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if username.startswith('@'):
                            username = username[1:]
                        usernames.append(username)
            else:
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - –æ–¥–Ω–æ –∏–º—è –Ω–∞ —Å—Ç—Ä–æ–∫—É
                for line in infile:
                    username = line.strip()
                    if username:
                        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if username.startswith('@'):
                            username = username[1:]
                        usernames.append(username)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)
    
    return usernames

async def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ X.com —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º async Playwright.")
    parser.add_argument('--input', '-i', required=True, help='–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV —Å –∫–æ–ª–æ–Ω–∫–æ–π "username" –∏–ª–∏ TXT)')
    parser.add_argument('--output', '-o', default='results.csv', help='–í—ã—Ö–æ–¥–Ω–æ–π CSV —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: results.csv)')
    parser.add_argument('--login', type=str, help='–õ–æ–≥–∏–Ω X (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/email)')
    parser.add_argument('--password', type=str, help='–ü–∞—Ä–æ–ª—å X')
    parser.add_argument('--max-concurrent', '-c', type=int, default=3, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)')
    parser.add_argument('--no-headless', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤–∏–¥–∏–º—ã–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ä—É—á–Ω–æ–π 2FA)')
    
    args = parser.parse_args()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    login_cred = args.login or os.getenv('X_LOGIN')
    password_cred = args.password or os.getenv('X_PASSWORD')

    if (login_cred and not password_cred) or (password_cred and not login_cred):
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏ –ª–æ–≥–∏–Ω, –∏ –ø–∞—Ä–æ–ª—å –≤–º–µ—Å—Ç–µ.")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(args.input):
        print(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input}")
        sys.exit(1)

    # –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    usernames = read_usernames_from_file(args.input)

    if not usernames:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª–µ.")
        sys.exit(1)

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

    # –ó–∞–ø—É—Å–∫ Playwright
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=not args.no_headless)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        context = await browser.new_context(
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
            viewport={'width': random.randint(1280, 1366), 'height': random.randint(720, 800)},
            locale='en-US',
            timezone_id='America/New_York'
        )

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if login_cred and password_cred:
            print("üîê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ X.com...")
            context = await login_x(context, not args.no_headless, login_cred, password_cred)
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ context –Ω–µ None
        if context is None:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞")
            await browser.close()
            sys.exit(1)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞—Ñ–æ—Ä–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        sem = asyncio.Semaphore(args.max_concurrent)
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é: {args.max_concurrent}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tasks = [asyncio.create_task(worker(sem, context, username)) for username in usernames]
        results = []

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for i, task in enumerate(asyncio.as_completed(tasks), 1):
            try:
                result = await task
                results.append(result)
                status_emoji = {
                    'exists_verified': '‚úÖ',      # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∫–ª–∏–∫–æ–º
                    'exists_likely': '‚òëÔ∏è',       # –í–µ—Ä–æ—è—Ç–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    'does_not_exist': '‚ùå',
                    'suspended': 'üö´',
                    'protected': 'üîí',
                    'requires_auth': 'üîë',
                    'error': '‚ö†Ô∏è'
                }.get(result['status'], '‚ùì')
                
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                extra_info = []
                if result.get('following_count') is not None:
                    extra_info.append(f"Following: {result['following_count']}")
                if result.get('follower_count') is not None:
                    extra_info.append(f"Followers: {result['follower_count']}")
                if result.get('external_links'):
                    extra_info.append(f"Links: {len(result['external_links'])}")
                if result.get('verification') == 'verified':
                    extra_info.append("‚úì")
                
                extra_str = f" ({', '.join(extra_info)})" if extra_info else ""
                
                print(f"{status_emoji} [{i}/{len(usernames)}] {result['username']} -> {result['status']}{extra_str}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è [{i}/{len(usernames)}] –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏: {e}")
                results.append({"username": "unknown", "status": "error", "last_activity": None, "external_links": [], "following_count": None, "follower_count": None, "verification": "unknown"})

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {args.output}...")
        with open(args.output, 'w', encoding='utf-8', newline='') as f:
            writer = csv.DictWriter(f, fieldnames=['username', 'status', 'last_activity', 'external_links', 'following_count', 'follower_count', 'verification'])
            writer.writeheader()
            for result in results:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
                links_str = '; '.join(result.get('external_links', []))
                writer.writerow({
                    'username': result.get('username', ''),
                    'status': result.get('status', ''),
                    'last_activity': result.get('last_activity', '') or '',
                    'external_links': links_str,
                    'following_count': result.get('following_count', '') or '',
                    'follower_count': result.get('follower_count', '') or '',
                    'verification': result.get('verification', '')
                })

        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {}
        verified_count = 0
        total_links = 0
        
        for result in results:
            status = result.get('status', 'unknown')
            stats[status] = stats.get(status, 0) + 1
            
            if result.get('verification') == 'verified':
                verified_count += 1
            
            if result.get('external_links'):
                total_links += len(result['external_links'])
        
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for status, count in stats.items():
            emoji = {
                'exists_verified': '‚úÖ',
                'exists_likely': '‚òëÔ∏è',
                'does_not_exist': '‚ùå', 
                'suspended': 'üö´',
                'protected': 'üîí',
                'requires_auth': 'üîë',
                'error': '‚ö†Ô∏è'
            }.get(status, '‚ùì')
            print(f"  {emoji} {status}: {count}")
        
        print(f"\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {verified_count}")
        print(f"  üîó –í—Å–µ–≥–æ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {total_links}")

        await browser.close()

if __name__ == '__main__':
    asyncio.run(main())
